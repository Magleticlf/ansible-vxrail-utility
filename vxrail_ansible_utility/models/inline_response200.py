# coding: utf-8

"""
    Day1 Bring Up Configuration

    The set of Day 1 Bring Up Configuration API(s) are used to deploy VxRail cluster.  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nic_profiles': 'list[str]'
    }

    attribute_map = {
        'nic_profiles': 'nic_profiles'
    }

    def __init__(self, nic_profiles=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._nic_profiles = None
        self.discriminator = None
        if nic_profiles is not None:
            self.nic_profiles = nic_profiles

    @property
    def nic_profiles(self):
        """Gets the nic_profiles of this InlineResponse200.  # noqa: E501

        NIC profiles  # noqa: E501

        :return: The nic_profiles of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._nic_profiles

    @nic_profiles.setter
    def nic_profiles(self, nic_profiles):
        """Sets the nic_profiles of this InlineResponse200.

        NIC profiles  # noqa: E501

        :param nic_profiles: The nic_profiles of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["FOUR_HIGH_SPEED", "TWO_HIGH_SPEED", "FOUR_LOW_SPEED", "TWO_LOW_TWO_HIGH_SPEED"]  # noqa: E501
        if not set(nic_profiles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nic_profiles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(nic_profiles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._nic_profiles = nic_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
